// define a variable to import the <Verifier> or <renamedVerifier> solidity contract generated by Zokrates
const SquareVerifier = artifacts.require('SquareVerifier');
const proofJson = require('../../zokrates/code/square/proof.json');

// Test verification with correct proof
// - use the contents from proof.json generated from zokrates steps

contract('TestSquareVerifier', accounts => {
  const account_one = accounts[0];
  const account_two = accounts[1];
  const {  proof, inputs } = proofJson;
  let verifier;

  before(async () => {
    verifier = await SquareVerifier.new(accounts);
  })

  describe('Test Square Verifier', () => {
    it('Uses content from proof.json to perform verification', async () => {
      const verified = await verifier.verifyTx(proof.a, proof.b, proof.c, inputs)
      assert.equal(verified, true, 'Incorrect proof')
    })
  })
  // Test verification with incorrect proof
  describe('Test Square Verifier', () => {
    it('Uses content from proof.json to perform verification', async () => {
      let verified;
      proof.b[0][0] = '0x0e4390cc7885ea85f2ac01d25ac995d470fe1d916276a870ba9d582b04aca930';
      try {
        verified = true;
        verified = await verifier.verifyTx(proof.a, proof.b, proof.c, inputs)
      } catch (ex) {
        verified = false;
      }
      assert.equal(verified, false, 'Supplied the correct proof')
    })
  })
})
    
